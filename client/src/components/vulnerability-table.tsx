import { useState } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Input } from "@/components/ui/input"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { Search, Filter, Download, ExternalLink, ChevronDown, ChevronUp } from "lucide-react"

interface Vulnerability {
  id: string
  title: string
  severity: "critical" | "high" | "medium" | "low"
  cvss: number
  status: "open" | "in_progress" | "resolved" | "false_positive"
  system: string
  discoveredDate: Date
  lastUpdated: Date
  description: string
}

//todo: remove mock functionality
const mockVulnerabilities: Vulnerability[] = [
  {
    id: "CVE-2024-001",
    title: "SQL Injection in User Authentication",
    severity: "critical",
    cvss: 9.8,
    status: "open",
    system: "Web Application Server",
    discoveredDate: new Date("2024-01-15"),
    lastUpdated: new Date("2024-01-16"),
    description: "Critical SQL injection vulnerability allowing unauthorized database access"
  },
  {
    id: "CVE-2024-002", 
    title: "Cross-Site Scripting (XSS) in Comments",
    severity: "high",
    cvss: 7.4,
    status: "in_progress",
    system: "Content Management System",
    discoveredDate: new Date("2024-01-14"),
    lastUpdated: new Date("2024-01-15"),
    description: "Stored XSS vulnerability in user comment system"
  },
  {
    id: "CVE-2024-003",
    title: "Outdated Library Dependencies",
    severity: "medium", 
    cvss: 5.9,
    status: "open",
    system: "API Gateway",
    discoveredDate: new Date("2024-01-13"),
    lastUpdated: new Date("2024-01-14"),
    description: "Multiple third-party libraries require security updates"
  },
  {
    id: "CVE-2024-004",
    title: "Weak Password Policy",
    severity: "low",
    cvss: 3.1,
    status: "resolved",
    system: "User Management",
    discoveredDate: new Date("2024-01-12"),
    lastUpdated: new Date("2024-01-13"),
    description: "Password policy allows weak passwords"
  }
]

const severityConfig = {
  critical: { color: "destructive", priority: 4 },
  high: { color: "secondary", priority: 3 },
  medium: { color: "secondary", priority: 2 },
  low: { color: "secondary", priority: 1 }
} as const

const statusConfig = {
  open: { color: "destructive", label: "Open" },
  in_progress: { color: "secondary", label: "In Progress" },
  resolved: { color: "secondary", label: "Resolved" },
  false_positive: { color: "secondary", label: "False Positive" }
} as const

export function VulnerabilityTable() {
  const [vulnerabilities] = useState<Vulnerability[]>(mockVulnerabilities)
  const [searchTerm, setSearchTerm] = useState("")
  const [severityFilter, setSeverityFilter] = useState<string>("all")
  const [statusFilter, setStatusFilter] = useState<string>("all")
  const [sortField, setSortField] = useState<keyof Vulnerability>("discoveredDate")
  const [sortDirection, setSortDirection] = useState<"asc" | "desc">("desc")

  const filteredVulnerabilities = vulnerabilities
    .filter(vuln => {
      const matchesSearch = vuln.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                           vuln.id.toLowerCase().includes(searchTerm.toLowerCase()) ||
                           vuln.system.toLowerCase().includes(searchTerm.toLowerCase())
      const matchesSeverity = severityFilter === "all" || vuln.severity === severityFilter
      const matchesStatus = statusFilter === "all" || vuln.status === statusFilter
      
      return matchesSearch && matchesSeverity && matchesStatus
    })
    .sort((a, b) => {
      const aValue = a[sortField]
      const bValue = b[sortField]
      
      let comparison = 0
      if (aValue < bValue) comparison = -1
      else if (aValue > bValue) comparison = 1
      
      return sortDirection === "desc" ? -comparison : comparison
    })

  const handleSort = (field: keyof Vulnerability) => {
    if (sortField === field) {
      setSortDirection(sortDirection === "asc" ? "desc" : "asc")
    } else {
      setSortField(field)
      setSortDirection("desc")
    }
  }

  const exportData = () => {
    console.log('Exporting vulnerability data') //todo: remove mock functionality
    // todo: implement actual CSV export
  }

  return (
    <Card data-testid="component-vulnerability-table">
      <CardHeader>
        <CardTitle className="flex items-center justify-between">
          <span>Vulnerability Management</span>
          <Button onClick={exportData} variant="outline" data-testid="button-export">
            <Download className="h-4 w-4 mr-2" />
            Export
          </Button>
        </CardTitle>
        
        <div className="flex flex-wrap gap-4 items-center">
          <div className="flex items-center gap-2 flex-1 min-w-[200px]">
            <Search className="h-4 w-4 text-muted-foreground" />
            <Input
              placeholder="Search vulnerabilities..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              data-testid="input-search-vulnerabilities"
            />
          </div>
          
          <Select value={severityFilter} onValueChange={setSeverityFilter}>
            <SelectTrigger className="w-[140px]" data-testid="select-severity-filter">
              <SelectValue placeholder="Severity" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Severities</SelectItem>
              <SelectItem value="critical">Critical</SelectItem>
              <SelectItem value="high">High</SelectItem>
              <SelectItem value="medium">Medium</SelectItem>
              <SelectItem value="low">Low</SelectItem>
            </SelectContent>
          </Select>
          
          <Select value={statusFilter} onValueChange={setStatusFilter}>
            <SelectTrigger className="w-[140px]" data-testid="select-status-filter">
              <SelectValue placeholder="Status" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Statuses</SelectItem>
              <SelectItem value="open">Open</SelectItem>
              <SelectItem value="in_progress">In Progress</SelectItem>
              <SelectItem value="resolved">Resolved</SelectItem>
              <SelectItem value="false_positive">False Positive</SelectItem>
            </SelectContent>
          </Select>
        </div>
      </CardHeader>
      
      <CardContent>
        <div className="rounded-md border">
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead 
                  className="cursor-pointer hover-elevate"
                  onClick={() => handleSort("id")}
                  data-testid="header-id"
                >
                  <div className="flex items-center gap-2">
                    ID
                    {sortField === "id" && (
                      sortDirection === "desc" ? <ChevronDown className="h-3 w-3" /> : <ChevronUp className="h-3 w-3" />
                    )}
                  </div>
                </TableHead>
                <TableHead 
                  className="cursor-pointer hover-elevate"
                  onClick={() => handleSort("title")}
                  data-testid="header-title"
                >
                  <div className="flex items-center gap-2">
                    Title
                    {sortField === "title" && (
                      sortDirection === "desc" ? <ChevronDown className="h-3 w-3" /> : <ChevronUp className="h-3 w-3" />
                    )}
                  </div>
                </TableHead>
                <TableHead 
                  className="cursor-pointer hover-elevate"
                  onClick={() => handleSort("severity")}
                  data-testid="header-severity"
                >
                  <div className="flex items-center gap-2">
                    Severity
                    {sortField === "severity" && (
                      sortDirection === "desc" ? <ChevronDown className="h-3 w-3" /> : <ChevronUp className="h-3 w-3" />
                    )}
                  </div>
                </TableHead>
                <TableHead>CVSS</TableHead>
                <TableHead>Status</TableHead>
                <TableHead>System</TableHead>
                <TableHead 
                  className="cursor-pointer hover-elevate"
                  onClick={() => handleSort("discoveredDate")}
                  data-testid="header-discovered"
                >
                  <div className="flex items-center gap-2">
                    Discovered
                    {sortField === "discoveredDate" && (
                      sortDirection === "desc" ? <ChevronDown className="h-3 w-3" /> : <ChevronUp className="h-3 w-3" />
                    )}
                  </div>
                </TableHead>
                <TableHead>Actions</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {filteredVulnerabilities.map((vulnerability) => (
                <TableRow 
                  key={vulnerability.id} 
                  className="hover-elevate"
                  data-testid={`row-vulnerability-${vulnerability.id}`}
                >
                  <TableCell className="font-mono text-sm">
                    {vulnerability.id}
                  </TableCell>
                  <TableCell>
                    <div>
                      <div className="font-medium">{vulnerability.title}</div>
                      <div className="text-xs text-muted-foreground line-clamp-1">
                        {vulnerability.description}
                      </div>
                    </div>
                  </TableCell>
                  <TableCell>
                    <Badge variant={severityConfig[vulnerability.severity].color as any}>
                      {vulnerability.severity}
                    </Badge>
                  </TableCell>
                  <TableCell>
                    <span className="font-mono">{vulnerability.cvss}</span>
                  </TableCell>
                  <TableCell>
                    <Badge variant={statusConfig[vulnerability.status].color as any}>
                      {statusConfig[vulnerability.status].label}
                    </Badge>
                  </TableCell>
                  <TableCell>{vulnerability.system}</TableCell>
                  <TableCell>
                    {vulnerability.discoveredDate.toLocaleDateString()}
                  </TableCell>
                  <TableCell>
                    <Button 
                      size="sm" 
                      variant="ghost"
                      data-testid={`button-view-${vulnerability.id}`}
                    >
                      <ExternalLink className="h-3 w-3" />
                    </Button>
                  </TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </div>
        
        <div className="flex items-center justify-between mt-4 text-sm text-muted-foreground">
          <div>
            Showing {filteredVulnerabilities.length} of {vulnerabilities.length} vulnerabilities
          </div>
        </div>
      </CardContent>
    </Card>
  )
}